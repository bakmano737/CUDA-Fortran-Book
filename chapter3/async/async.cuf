! 
!     Copyright (c) 2017, NVIDIA CORPORATION.  All rights reserved.
!
! NVIDIA CORPORATION and its licensors retain all intellectual property
! and proprietary rights in and to this software, related documentation
! and any modifications thereto.
!
!
!    These example codes are a portion of the code samples from the companion
!    website to the book "CUDA Fortran for Scientists and Engineers":
!
! http://store.elsevier.com/product.jsp?isbn=9780124169708
!

! This code demonstrates strategies hiding data transfers via
! asynchronous data copies in multiple streams

module kernels_m
contains
  attributes(global) subroutine kernel(a, offset)
    implicit none
    real :: a(*)
    integer, value :: offset
    integer :: i
    real :: c, s, x

    i = offset + threadIdx%x + (blockIdx%x-1)*blockDim%x
    x = i; s = sin(x); c = cos(x)
    a(i) = a(i) + sqrt(s**2+c**2)
  end subroutine kernel
end module kernels_m

program testAsync
  use cudafor
  use kernels_m
  implicit none
  integer, parameter :: blockSize = 256, nStreams = 4
  integer, parameter :: n = 4*1024*blockSize*nStreams
  real, pinned, allocatable :: a(:)
  real, device :: a_d(n)
  integer(kind=cuda_stream_kind) :: stream(nStreams)
  type (cudaEvent) :: startEvent, stopEvent, dummyEvent
  real :: time
  integer :: i, istat, offset, streamSize = n/nStreams
  logical :: pinnedFlag
  type (cudaDeviceProp) :: prop
  
  istat = cudaGetDeviceProperties(prop, 0)
  write(*,"(' Device: ', a,/)") trim(prop%name)

  ! allocate pinned  host memory
  allocate(a(n), STAT=istat, PINNED=pinnedFlag)
  if (istat /= 0) then
     write(*,*) 'Allocation of a failed'
     stop
  else
     if (.not. pinnedFlag) &
          write(*,*) 'Pinned allocation failed'
  end if

  ! create events and streams
  istat = cudaEventCreate(startEvent)
  istat = cudaEventCreate(stopEvent)  
  istat = cudaEventCreate(dummyEvent)  
  do i = 1, nStreams
     istat = cudaStreamCreate(stream(i))
  enddo
  
  ! baseline case - sequential transfer and execute
  a = 0
  istat = cudaEventRecord(startEvent,0)
  a_d = a
  call kernel<<<n/blockSize, blockSize>>>(a_d, 0)
  a = a_d
  istat = cudaEventRecord(stopEvent, 0)
  istat = cudaEventSynchronize(stopEvent)
  istat = cudaEventElapsedTime(time, startEvent, stopEvent)
  write(*,*) 'Time for sequential ', &
       'transfer and execute (ms): ', time
  write(*,*) '  max error: ', maxval(abs(a-1.0))

  ! asynchronous version 1: loop over {copy, kernel, copy}
  a = 0
  istat = cudaEventRecord(startEvent,0)
  do i = 1, nStreams
     offset = (i-1)*streamSize
     istat = cudaMemcpyAsync( &
          a_d(offset+1),a(offset+1),streamSize,stream(i))
     call kernel<<<streamSize/blockSize, blockSize, &
                   0, stream(i)>>>(a_d,offset)
     istat = cudaMemcpyAsync( &
          a(offset+1),a_d(offset+1),streamSize,stream(i))
  enddo
  istat = cudaEventRecord(stopEvent, 0)
  istat = cudaEventSynchronize(stopEvent)
  istat = cudaEventElapsedTime(time, startEvent, stopEvent)
  write(*,*) 'Time for asynchronous V1 ', &
       'transfer and execute (ms): ', time
  write(*,*) '  max error: ', maxval(abs(a-1.0))

  ! asynchronous version 2: 
  ! loop over copy, loop over kernel, loop over copy
  a = 0
  istat = cudaEventRecord(startEvent,0)
  do i = 1, nStreams
     offset = (i-1)*streamSize
     istat = cudaMemcpyAsync( &
          a_d(offset+1),a(offset+1),streamSize,stream(i))
  enddo
  do i = 1, nStreams
     offset = (i-1)*streamSize
     call kernel<<<streamSize/blockSize, blockSize, &
                   0, stream(i)>>>(a_d,offset)
  enddo
  do i = 1, nStreams
     offset = (i-1)*streamSize
     istat = cudaMemcpyAsync(&
          a(offset+1),a_d(offset+1),streamSize,stream(i))
  enddo
  istat = cudaEventRecord(stopEvent, 0)
  istat = cudaEventSynchronize(stopEvent)
  istat = cudaEventElapsedTime(time, startEvent, stopEvent)
  write(*,*) 'Time for asynchronous V2 ', &
       'transfer and execute (ms): ', time
  write(*,*) '  max error: ', maxval(abs(a-1.0))

  ! asynchronous version 3: 
  ! loop over copy, loop over {kernel, event}, 
  ! loop over copy
  a = 0
  istat = cudaEventRecord(startEvent,0)
  do i = 1, nStreams
     offset = (i-1)*streamSize
     istat = cudaMemcpyAsync( &
          a_d(offset+1),a(offset+1),streamSize,stream(i))
  enddo
  do i = 1, nStreams
     offset = (i-1)*streamSize
     call kernel<<<streamSize/blockSize, blockSize, &
                   0, stream(i)>>>(a_d,offset)
     istat = cudaEventRecord(dummyEvent, stream(i))
  enddo
  do i = 1, nStreams
     offset = (i-1)*streamSize
     istat = cudaMemcpyAsync( &
          a(offset+1),a_d(offset+1),streamSize,stream(i))
  enddo
  istat = cudaEventRecord(stopEvent, 0)
  istat = cudaEventSynchronize(stopEvent)
  istat = cudaEventElapsedTime(time, startEvent, stopEvent)
  write(*,*) 'Time for asynchronous V3 ', &
       'transfer and execute (ms): ', time
  write(*,*) '  max error: ', maxval(abs(a-1.0))

  ! cleanup
  istat = cudaEventDestroy(startEvent)
  istat = cudaEventDestroy(stopEvent)
  istat = cudaEventDestroy(dummyEvent)
  do i = 1, nStreams
     istat = cudaStreamDestroy(stream(i))
  enddo

  if (maxval(abs(a-1.0)) .gt. 1.0e-6) then
     write(*,*) "Test Failed"
  else
     write(*,*) "Test Passed"
  endif

  deallocate(a)

end program testAsync

