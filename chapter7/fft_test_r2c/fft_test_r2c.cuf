! 
!     Copyright (c) 2017, NVIDIA CORPORATION.  All rights reserved.
!
! NVIDIA CORPORATION and its licensors retain all intellectual property
! and proprietary rights in and to this software, related documentation
! and any modifications thereto.
!
!
!    These example codes are a portion of the code samples from the companion
!    website to the book "CUDA Fortran for Scientists and Engineers":
!
! http://store.elsevier.com/product.jsp?isbn=9780124169708
!

program fft_test_r2c
use iso_c_binding
use cudafor
use precision_m
use cufft_m
implicit none
integer, allocatable:: kx(:)
real(fp_kind), allocatable:: rinput(:)
real(fp_kind), allocatable, device:: rinput_d(:)
complex(fp_kind),allocatable:: coutput(:)

type(c_ptr):: plan
integer:: i,j,k,n,istat
real(fp_kind):: twopi=8._fp_kind*atan(1._fp_kind),h

character*1:: a
real(fp_kind):: x,y
integer:: nerrors

n=16
h=twopi/real(n,fp_kind)

! allocate arrays on the host
allocate (rinput(n),coutput(n/2+1),kx(n/2+1))

! allocate arrays on the device
allocate (rinput_d(n+2))

!initialize arrays on host
kx =(/ (i-1, i=1,n/2+1) /)

do i=1,n
 rinput(i)=(cos(2*real(i-1,fp_kind)*h)+ &
            sin(3*real(i-1,fp_kind)*h))
end do

!copy arrays to device
rinput_d=rinput

! Initialize the plan for real to complex transform
if (fp_kind== singlePrecision) call cufftPlan1D(plan,n,CUFFT_R2C,1)
if (fp_kind== doublePrecision) call cufftPlan1D(plan,n,CUFFT_D2Z,1)

! Execute  Forward transform in place
call cufftExec(plan,rinput_d,rinput_d)

! Copy results back to host
istat=cudaMemcpy(coutput,rinput_d,n+2,cudaMemcpyDeviceToHost)

print *," Transform from real array"
do i=1,n/2+1
 write(*,'(i2,1x,i2,2(f8.4))') i,kx(i),coutput(i)/n
end do

nerrors = 0
open(unit=10,file='out.expd')
read(10,*) a

do i = 1, n/2+1
  read(10,*) j,k,x,y
  if (abs(real(coutput(i)/n) - x) .gt. 0.0000001_fp_kind) then
     nerrors = nerrors + 1
  endif
  if (abs(imag(coutput(i)/n) - y) .gt. 0.0000001_fp_kind) then
     nerrors = nerrors + 1
  endif
enddo

close(unit=10)

if (nerrors .eq. 0) then
   print *, "Test Passed"
else
   print *, "Test Failed"
endif


!release memory on the host and on the device
deallocate (rinput,coutput,kx,rinput_d)

! Destroy the plans
call cufftDestroy(plan)

end program fft_test_r2c

