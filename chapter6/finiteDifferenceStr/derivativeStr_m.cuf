! 
!     Copyright (c) 2017, NVIDIA CORPORATION.  All rights reserved.
!
! NVIDIA CORPORATION and its licensors retain all intellectual property
! and proprietary rights in and to this software, related documentation
! and any modifications thereto.
!
!
!    These example codes are a portion of the code samples from the companion
!    website to the book "CUDA Fortran for Scientists and Engineers":
!
! http://store.elsevier.com/product.jsp?isbn=9780124169708
!

! This file contains the setup host code and kernels for 
! calculating derivatives using a 9-point finite difference
! stencil on a stretched grid

module derivativeStr_m
  use cudafor
  use precision_m

  integer, parameter :: mx = 64, my = 64, mz = 64
  real(fp_kind) :: x(mx), y(my), z(mz)

  ! shared memory tiles will be m*-by-*Pencils
  ! sPencils is used when each thread calculates
  !   the derivative at one point
  ! lPencils is used for coalescing in y and z
  !   where each thread has to calculate the
  !   derivative at mutiple points

  integer, parameter :: sPencils = 4   ! small # pencils
  integer, parameter :: lPencils = 32  ! large # pencils
  
  type(dim3) :: g_sp(3), b_sp(3)
  type(dim3) :: g_lp(3), b_lp(3)

  ! stencil coefficients
  ! functions of index for streched grid
  real(fp_kind), constant :: &
       ax_c(mx), bx_c(mx), cx_c(mx), dx_c(mx), &
       ay_c(my), by_c(my), cy_c(my), dy_c(my), &
       az_c(mz), bz_c(mz), cz_c(mz), dz_c(mz) 

  ! mesh stretching factor parameter
  real(fp_kind), parameter :: alpha = 0.0
 
contains

  ! host routine to set constant data

  subroutine setDerivativeParameters()

    implicit none

    real(fp_kind) :: ax(mx), bx(mx), cx(mx), dx(mx)
    real(fp_kind) :: ay(my), by(my), cy(my), dy(my)
    real(fp_kind) :: az(mz), bz(mz), cz(mz), dz(mz)
    real(fp_kind) :: dsinv, twoPi, scale, s
    integer :: i,j,k

    ! check to make sure dimensions are multiples of sPencils
    if (mod(my,sPencils) /= 0) then
       write(*,*) '"my" must be a multiple of sPencils'
       stop
    end if

    if (mod(mx,sPencils) /= 0) then
       write(*,*) '"mx" must be a multiple of sPencils', & 
            ' (for y-deriv)'
       stop
    end if

    if (mod(mz,sPencils) /= 0) then
       write(*,*) '"mz" must be a multiple of sPencils', &
            ' (for z-deriv)'
       stop
    end if

    if (mod(mx,lPencils) /= 0) then
       write(*,*) '"mx" must be a multiple of lPencils'
       stop
    end if

    if (mod(my,lPencils) /= 0) then
       write(*,*) '"my" must be a multiple of lPencils'
       stop
    end if

    ! stencil weights, which include the scaling factors 
    ! for the stretched grid

    twoPi = 8.0_8* atan(1.0_8)

    dsinv = real(mx-1)
    do i = 1, mx
       s = (i-1.)/(mx-1.)
       x(i) = 2./(2.-alpha)*(s - alpha*(s/2. &
            - sin(2.*twoPi*s)/(4.*twoPi)))
       scale = (1.-alpha/2.)/(1.-alpha*(sin(twoPi*s))**2)

       ax(i) =  4./  5. * dsinv * scale
       bx(i) = -1./  5. * dsinv * scale
       cx(i) =  4./105. * dsinv * scale
       dx(i) = -1./280. * dsinv * scale
    enddo
    ax_c = ax; bx_c = bx; cx_c = cx; dx_c = dx

    dsinv = real(my-1)
    do j = 1, my
       s = (j-1.)/(my-1.)
       y(j) = 2./(2.-alpha)*(s - alpha*(s/2. &
            - sin(2.*twoPi*s)/(4.*twoPi)))
       scale = (1.-alpha/2)/(1.-alpha*(sin(twoPi*s))**2)

       ay(j) =  4./  5. * dsinv * scale
       by(j) = -1./  5. * dsinv * scale
       cy(j) =  4./105. * dsinv * scale
       dy(j) = -1./280. * dsinv * scale
    enddo
    ay_c = ay; by_c = by; cy_c = cy; dy_c = dy

    dsinv = real(mz-1)
    do k = 1, mz
       s = (k-1.)/(mz-1.)
       z(k) = 2./(2.-alpha)*(s - alpha*(s/2. &
            - sin(2.*twoPi*s)/(4.*twoPi)))
       scale = (1.-alpha/2)/(1.-alpha*(sin(twoPi*s))**2)

       az(k) =  4./  5. * dsinv * scale
       bz(k) = -1./  5. * dsinv * scale
       cz(k) =  4./105. * dsinv * scale
       dz(k) = -1./280. * dsinv * scale
    enddo
    az_c = az; bz_c = bz; cz_c = cz; dz_c = dz

    ! Execution configurations for small and 
    ! large pencil tiles

    g_sp(1) = dim3(my/sPencils,mz,1)
    b_sp(1) = dim3(mx,sPencils,1)

    g_lp(1) = dim3(my/lPencils,mz,1)
    b_lp(1) = dim3(mx,sPencils,1)

    g_sp(2) = dim3(mx/sPencils,mz,1)
    b_sp(2) = dim3(sPencils,my,1)

    g_lp(2) = dim3(mx/lPencils,mz,1)
    ! we want to use the same number of threads as above.
    ! so if we use lPencils instead of sPencils in one
    ! dimension, we multiply the other by sPencils/lPencils
    b_lp(2) = dim3(lPencils, my*sPencils/lPencils,1)

    g_sp(3) = dim3(mx/sPencils,my,1)    
    b_sp(3) = dim3(sPencils,mz,1)

    g_lp(3) = dim3(mx/lPencils,my,1)    
    b_lp(3) = dim3(lPencils, mz*sPencils/lPencils,1)

  end subroutine setDerivativeParameters

  ! -------------
  ! x derivatives
  ! -------------

  attributes(global) subroutine deriv_x(f, df)
    implicit none

    real(fp_kind), intent(in) :: f(mx,my,mz)
    real(fp_kind), intent(out) :: df(mx,my,mz)

    real(fp_kind), shared :: f_s(-3:mx+4,sPencils)

    integer :: i,j,k,j_l

    i = threadIdx%x
    j = (blockIdx%x-1)*blockDim%y + threadIdx%y
    ! j_l is local variant of j for accessing shared memory
    j_l = threadIdx%y            
    k = blockIdx%y

    f_s(i,j_l) = f(i,j,k)

    call syncthreads()

    ! fill in periodic images in shared memory array 

    if (i <= 4) then
       f_s(i-4, j_l) = f_s(mx+i-5,j_l) 
       f_s(mx+i,j_l) = f_s(i+1,   j_l)   
    endif

    call syncthreads()

    df(i,j,k) = &
         (ax_c(i) *( f_s(i+1,j_l) - f_s(i-1,j_l) )   &
         +bx_c(i) *( f_s(i+2,j_l) - f_s(i-2,j_l) )   &
         +cx_c(i) *( f_s(i+3,j_l) - f_s(i-3,j_l) )   &
         +dx_c(i) *( f_s(i+4,j_l) - f_s(i-4,j_l) ))
 
  end subroutine deriv_x

  ! this version avoids the first syncthreads() call
  ! in the above version by using the same thread
  ! to write and read the same shared memory value

  attributes(global) subroutine deriv_x_1sync(f, df)
    implicit none

    real(fp_kind), intent(in) :: f(mx,my,mz)
    real(fp_kind), intent(out) :: df(mx,my,mz)

    real(fp_kind), shared :: f_s(-3:mx+4,sPencils)

    integer :: i,j,k,j_l

    i = threadIdx%x
    j = (blockIdx%x-1)*blockDim%y + threadIdx%y
    ! j_l is local variant of j for accessing shared memory
    j_l = threadIdx%y            
    k = blockIdx%y

    f_s(i,j_l) = f(i,j,k)

    ! fill in periodic images in shared memory array 
    ! Use the same thread, (i,j_l), on the RHS that was used 
    ! to read the value in, so no syncthreads is needed

    if (i>mx-5 .and. i<mx) f_s(i-(mx-1),j_l) = f_s(i,j_l)
    if (i>1    .and. i<6 ) f_s(i+(mx-1),j_l) = f_s(i,j_l) 

    call syncthreads()

    df(i,j,k) = &
         (ax_c(i) *( f_s(i+1,j_l) - f_s(i-1,j_l) )   &
         +bx_c(i) *( f_s(i+2,j_l) - f_s(i-2,j_l) )   &
         +cx_c(i) *( f_s(i+3,j_l) - f_s(i-3,j_l) )   &
         +dx_c(i) *( f_s(i+4,j_l) - f_s(i-4,j_l) ))
 
  end subroutine deriv_x_1sync

  ! this version uses a 64x32 shared memory tile, 
  ! still with 64*sPencils threads

  attributes(global) subroutine deriv_x_lPencils(f, df)
    implicit none

    real(fp_kind), intent(in) :: f(mx,my,mz)
    real(fp_kind), intent(out) :: df(mx,my,mz)

    real(fp_kind), shared :: f_s(-3:mx+4,lPencils)

    integer :: i,j,k,j_l,jBase

    i = threadIdx%x
    jBase = (blockIdx%x-1)*lPencils
    k = blockIdx%y

    do j_l = threadIdx%y, lPencils, blockDim%y
       j = jBase + j_l
       f_s(i,j_l) = f(i,j,k)
    enddo

    call syncthreads()

    ! fill in periodic images in shared memory array 

    if (i <= 4) then
       do j_l = threadIdx%y, lPencils, blockDim%y
          f_s(i-4, j_l) = f_s(mx+i-5,j_l) 
          f_s(mx+i,j_l) = f_s(i+1,   j_l)   
       enddo
    endif

    call syncthreads()

    do j_l = threadIdx%y, lPencils, blockDim%y
       j = jBase + j_l
       df(i,j,k) = &
            (ax_c(i) *( f_s(i+1,j_l) - f_s(i-1,j_l) )   &
            +bx_c(i) *( f_s(i+2,j_l) - f_s(i-2,j_l) )   &
            +cx_c(i) *( f_s(i+3,j_l) - f_s(i-3,j_l) )   &
            +dx_c(i) *( f_s(i+4,j_l) - f_s(i-4,j_l) ))
    enddo
 
  end subroutine deriv_x_lPencils

  ! -------------
  ! y derivatives
  ! -------------

  attributes(global) subroutine deriv_y(f, df)
    implicit none

    real(fp_kind), intent(in) :: f(mx,my,mz)
    real(fp_kind), intent(out) :: df(mx,my,mz)

    real(fp_kind), shared :: f_s(sPencils,-3:my+4)

    integer :: i,i_l,j,k

    i = (blockIdx%x-1)*blockDim%x + threadIdx%x
    i_l = threadIdx%x
    j = threadIdx%y
    k = blockIdx%y

    f_s(i_l,j) = f(i,j,k)

    call syncthreads()

    if (j <= 4) then
       f_s(i_l,j-4) = f_s(i_l,my+j-5) 
       f_s(i_l,my+j) = f_s(i_l,j+1)   
    endif

    call syncthreads()

    df(i,j,k) = &
         (ay_c(j) *( f_s(i_l,j+1) - f_s(i_l,j-1) )   &
         +by_c(j) *( f_s(i_l,j+2) - f_s(i_l,j-2) )   &
         +cy_c(j) *( f_s(i_l,j+3) - f_s(i_l,j-3) )   &
         +dy_c(j) *( f_s(i_l,j+4) - f_s(i_l,j-4) )) 

  end subroutine deriv_y

  ! y derivative using a tile of 32x64
  ! launch with thread block of 32x8

  attributes(global) subroutine deriv_y_lPencils(f, df)
    implicit none

    real(fp_kind), intent(in) :: f(mx,my,mz)
    real(fp_kind), intent(out) :: df(mx,my,mz)

    real(fp_kind), shared :: f_s(lPencils,-3:my+4)

    integer :: i,j,k,i_l

    i_l = threadIdx%x
    i = (blockIdx%x-1)*blockDim%x + threadIdx%x
    k = blockIdx%y
    
    do j = threadIdx%y, my, blockDim%y
       f_s(i_l,j) = f(i,j,k)
    enddo
    
    call syncthreads()

    j = threadIdx%y
    if (j <= 4) then
       f_s(i_l,j-4) = f_s(i_l,my+j-5) 
       f_s(i_l,my+j) = f_s(i_l,j+1)   
    endif

    call syncthreads()

    do j = threadIdx%y, my, blockDim%y
       df(i,j,k) = &
            (ay_c(j) *( f_s(i_l,j+1) - f_s(i_l,j-1) )   &
            +by_c(j) *( f_s(i_l,j+2) - f_s(i_l,j-2) )   &
            +cy_c(j) *( f_s(i_l,j+3) - f_s(i_l,j-3) )   &
            +dy_c(j) *( f_s(i_l,j+4) - f_s(i_l,j-4) )) 
    enddo

  end subroutine deriv_y_lPencils

  ! ------------
  ! z derivative
  ! ------------

  attributes(global) subroutine deriv_z(f, df)
    implicit none

    real(fp_kind), intent(in) :: f(mx,my,mz)
    real(fp_kind), intent(out) :: df(mx,my,mz)

    real(fp_kind), shared :: f_s(sPencils,-3:mz+4)

    integer :: i,i_l,j,k

    i = (blockIdx%x-1)*blockDim%x + threadIdx%x
    i_l = threadIdx%x
    j = blockIdx%y
    k = threadIdx%y

    f_s(i_l,k) = f(i,j,k)

    call syncthreads()

    if (k <= 4) then
       f_s(i_l,k-4) = f_s(i_l,mz+k-5) 
       f_s(i_l,mz+k) = f_s(i_l,k+1)   
    endif

    call syncthreads()

    df(i,j,k) = &
         (az_c(k) *( f_s(i_l,k+1) - f_s(i_l,k-1) )   &
         +bz_c(k) *( f_s(i_l,k+2) - f_s(i_l,k-2) )   &
         +cz_c(k) *( f_s(i_l,k+3) - f_s(i_l,k-3) )   &
         +dz_c(k) *( f_s(i_l,k+4) - f_s(i_l,k-4) ))
 
  end subroutine deriv_z


  attributes(global) subroutine deriv_z_lPencils(f, df)
    implicit none

    real(fp_kind), intent(in) :: f(mx,my,mz)
    real(fp_kind), intent(out) :: df(mx,my,mz)

    real(fp_kind), shared :: f_s(lPencils,-3:mz+4)

    integer :: i,i_l,j,k

    i = (blockIdx%x-1)*blockDim%x + threadIdx%x
    i_l = threadIdx%x
    j = blockIdx%y

    do k = threadIdx%y, mz, blockDim%y
       f_s(i_l,k) = f(i,j,k)
    enddo

    call syncthreads()

    k = threadIdx%y
    if (k <= 4) then
       f_s(i_l,k-4) = f_s(i_l,mz+k-5) 
       f_s(i_l,mz+k) = f_s(i_l,k+1)   
    endif

    call syncthreads()

    do k = threadIdx%y, mz, blockDim%y
       df(i,j,k) = &
            (az_c(k) *( f_s(i_l,k+1) - f_s(i_l,k-1) )   &
            +bz_c(k) *( f_s(i_l,k+2) - f_s(i_l,k-2) )   &
            +cz_c(k) *( f_s(i_l,k+3) - f_s(i_l,k-3) )   &
            +dz_c(k) *( f_s(i_l,k+4) - f_s(i_l,k-4) ))
    enddo
  end subroutine deriv_z_lPencils

end module derivativeStr_m
